{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/babel-loader/lib/index.js!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/feature_funcs.js","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/feature_funcs.js","mtime":1682360357856},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/babel-loader/lib/index.js","mtime":1682361371663},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/eslint-loader/index.js","mtime":1682361370726}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly9pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudC9zcmMvbW9tZW50JzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgaXNEYXRhRnJlc2g6IGZ1bmN0aW9uIGlzRGF0YUZyZXNoKGFkdmlzb3J5KSB7CiAgICBpZiAoJ2hvdXJzX2RhdGFfdmFsaWQnIGluIGFkdmlzb3J5KSB7CiAgICAgIHZhciBkYXRhX3RpbWVvdXQgPSBhZHZpc29yeS5ob3Vyc19kYXRhX3ZhbGlkOyAvL0NoZWNrIHRvIHNlZSBpZiB0aGUgZGF0ZSB3ZSBoYXZlIGlzIHN0aWxsIHdpdGhpbiB0aGUgYWNjZXB0YWJsZSBkYXRhIHRpbWVvdXQgcmFuZ2UuCgogICAgICB2YXIgbm93X2RhdGUgPSBtb21lbnQoKTsKICAgICAgdmFyIGRhdGFfZGF0ZSA9IG1vbWVudChhZHZpc29yeS5kYXRlKTsKICAgICAgdmFyIGhvdXJzX2RlbHRhID0gbm93X2RhdGUuZGlmZihkYXRhX2RhdGUsICdob3VycycpOwoKICAgICAgaWYgKGhvdXJzX2RlbHRhIDw9IGRhdGFfdGltZW91dCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0KfTs="},{"version":3,"sources":["/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/feature_funcs.js"],"names":["moment","isDataFresh","advisory","data_timeout","hours_data_valid","now_date","data_date","date","hours_delta","diff"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,eAAe;AACXC,EAAAA,WADW,uBACCC,QADD,EACW;AAClB,QAAG,sBAAsBA,QAAzB,EACA;AACI,UAAIC,YAAY,GAAGD,QAAQ,CAACE,gBAA5B,CADJ,CAEI;;AACA,UAAIC,QAAQ,GAAGL,MAAM,EAArB;AACA,UAAIM,SAAS,GAAGN,MAAM,CAACE,QAAQ,CAACK,IAAV,CAAtB;AACA,UAAIC,WAAW,GAAGH,QAAQ,CAACI,IAAT,CAAcH,SAAd,EAAyB,OAAzB,CAAlB;;AACA,UAAGE,WAAW,IAAIL,YAAlB,EACA;AACI,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;AAfU,CAAf","sourcesContent":["//import moment from 'moment/src/moment';\nimport moment from 'moment';\n\nexport default {\n    isDataFresh(advisory) {\n        if('hours_data_valid' in advisory)\n        {\n            let data_timeout = advisory.hours_data_valid;\n            //Check to see if the date we have is still within the acceptable data timeout range.\n            let now_date = moment();\n            let data_date = moment(advisory.date);\n            let hours_delta = now_date.diff(data_date, 'hours');\n            if(hours_delta <= data_timeout)\n            {\n                return(true);\n            }\n        }\n        return(false);\n    }\n}\n"]}]}