{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/babel-loader/lib/index.js!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/eslint-loader/index.js??ref--13-0!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/nws_rest_api.js","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/nws_rest_api.js","mtime":1682360357856},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/babel-loader/lib/index.js","mtime":1682361371663},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/eslint-loader/index.js","mtime":1682361370726}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/utilities/nws_rest_api.js"],"names":["axios","NWS_API_BASE_URL","EPA_API_BASE_URL","NOAA_STATION_QUERY_BASE_URL","NOAA_TIDES_BASE_URL","GetNWSActiveAlerts","params","url","URL","searchParams","append","latitude","longitude","event","console","log","debug","href","alerts","get","headers","then","data","features","GetNWSZones","zones_promise","zones","catch","error","error_message","status_code","response","undefined","status","message","GetNWSStationsGridURL","stations_promise","stations_at_grid","GetNWSPointInformation","point_info_promise","whats_here","properties","GetObservingStationsforGrid","obs_stations_promise","station_lists","GetNWSStationLatestObservations","station_code","station_promise","station_data","GetNWSForecast","url_param_provided","forecast_promise","forecast_properties","forecast_url","forecast","forecast_data","EPAGetUVIndex","time_frame","post_code","city","state_code","uv_index_promise","uv_index","NOAAFindTideStation","radius","find_station_promise","station_list","NOAATideQuery","date","station","product","datum","time_zone","interval","units","tide_promise","header","tide_data"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nlet NWS_API_BASE_URL = \"https://api.weather.gov\";\n//let EPA_API_BASE_URL = \"https://enviro.epa.gov/enviro/efservice/\"\n//let EPA_API_BASE_URL = 'http://127.0.0.1:5000/api/v1/';\n//let EPA_API_BASE_URL = 'https://devapi.howsthebeach.org/api/v1/';\nlet EPA_API_BASE_URL = 'https://data.epa.gov/efservice/';\nlet NOAA_STATION_QUERY_BASE_URL = 'https://api.tidesandcurrents.noaa.gov/mdapi/prod/webapi/tidepredstations.json';\nlet NOAA_TIDES_BASE_URL = \"https://api.tidesandcurrents.noaa.gov/api/prod/datagetter\";\nexport default {\n    /*\n    GetNWSActiveAlerts\n    This retrieves any active alerts for the latitude and longitude passed in the params. If a specific event is passed in\n    the params, this will return only that specific alert if it is active.\n    Parameters:\n        params:\n            -latitude Latitude for the request\n            -longitude Longitude for the request\n            -event NWS defined event, these are found here: https://api.weather.gov/alerts/types\n    Return:\n        Returns a promise, if it succeeds we return the features portion of the response.\n    * */\n    GetNWSActiveAlerts(params)\n    {\n        //let url_params = [];\n        let url = new URL(NWS_API_BASE_URL + '/alerts/active');\n        if('latitude' in params && 'longitude' in params)\n        {\n            url.searchParams.append('point', params.latitude + \",\" + params.longitude)\n        }\n        if('event' in params)\n        {\n            url.searchParams.append('event', params.event)\n        }\n        console.log(\"GetNWSActiveAlerts started.\");\n\n        console.debug(\"GetNWSActiveAlerts GET url: \" + url.href);\n        let alerts = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(alerts=> {\n                if('data' in alerts) {\n                    return alerts.data.features;\n                }\n            })\n        return(alerts);\n\n    },\n    GetNWSZones(params)\n    {\n        console.log(\"GetNWSAcGetNWSZonestiveAlerts started.\");\n        let url = new URL(NWS_API_BASE_URL + '/zones');\n        if('latitude' in params && 'longitude' in params)\n        {\n            url.searchParams.append('point', params.latitude + \",\" + params.longitude)\n        }\n\n        console.debug(\"GetNWSZones GET url: \" + url.href);\n        let zones_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(function(zones) {\n                if('data' in zones) {\n                    return zones.data.features;\n                }\n                else {\n                    return [];\n                }\n                })\n            .catch(error=> {\n                let error_message = '';\n                let status_code = 404;\n                if('response' in error && error.response !== undefined) {\n                    status_code = error.response.status;\n                    if ('error' in error.response.data) {\n                        if ('message' in error.response.data.error) {\n                            error_message = error.response.data.error.message;\n                        }\n                    } else {\n                        error_message = error.response.data;\n                    }\n                    console.error(\"Status code: \" + status_code +\". Error Msg: \" + error_message);\n                }\n                else{\n                    console.error(error);\n                }\n            });\n        return zones_promise;\n    },\n    GetNWSStationsGridURL(url) {\n        console.debug(\"GetNWSStations GET url: \" + url);\n        url = new URL(url);\n        //The url\n        let stations_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(function(stations_at_grid) {\n                stations_at_grid\n            })\n        return(stations_promise);\n    },\n    /*\n    GetNWSPointInformation\n    This gives us what is available(forecasts, observing station) for the provided latitude and longitude. We can use the\n    links returned to then query forecasts and observation data.\n    Parameters:\n        -latitude Latitude for the request\n        -longitude Longitude for the request\n    Return:\n        Returns a promise, if it succeeds we return the data/products for the point.\n    * */\n    GetNWSPointInformation(latitude, longitude) {\n        console.log(\"GetNWSForecast started.\");\n        let url = new URL(NWS_API_BASE_URL + '/points/' + latitude + ',' + longitude);\n        console.debug(\"GetNWSForecast GET url: \" + url.href);\n        //This first request will get the information available at the provided point.\n        let point_info_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(function(whats_here) {\n                    if('data' in whats_here && 'properties' in whats_here.data) {\n                        return (whats_here.data.properties);\n                    }\n            })\n            .catch(error=> {\n                    let error_message = '';\n                    let status_code = 404;\n                    if('response' in error && error.response !== undefined) {\n                        status_code = error.response.status;\n                        if ('error' in error.response.data) {\n                            if ('message' in error.response.data.error) {\n                                error_message = error.response.data.error.message;\n                            }\n                        } else {\n                            error_message = error.response.data;\n                        }\n                        console.error(\"Status code: \" + status_code +\". Error Msg: \" + error_message);\n                    }\n                    else{\n                        console.error(error);\n                    }\n                });\n\n        return(point_info_promise);\n    },\n\n    GetObservingStationsforGrid(url) {\n        console.log(\"GetObservingStationsforGrid started.\");\n        url = new URL(url);\n        console.debug(\"GetObservingStationsforGrid GET url: \" + url);\n\n        //This first request will get the information available at the provided point.\n        let obs_stations_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(function (station_lists) {\n                if('data' in station_lists) {\n                    return(station_lists.data);\n                }\n\n            })\n        return(obs_stations_promise);\n    },\n    GetNWSStationLatestObservations(params) {\n        console.log(\"GetNWSStationLatestObservations started.\");\n        let url = undefined;\n        if('url' in params)\n        {\n            url = new URL(params['url']);\n        }\n        else {\n            if('station_code' in params) {\n                url = new URL(NWS_API_BASE_URL + '/stations/' + params.station_code + '/observations/latest');\n            }\n        }\n        if(url !== undefined) {\n            console.debug(\"GetNWSStationLatestObservations GET url: \" + url);\n\n            //This first request will get the information available at the provided point.\n            let station_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n                .then(function (station_data) {\n                    if ('data' in station_data && 'properties' in station_data.data) {\n                        return (station_data.data.properties);\n                    }\n                })\n                .catch(error => {\n                    let error_message = '';\n                    let status_code = 404;\n                    if ('response' in error && error.response !== undefined) {\n                        status_code = error.response.status;\n                        if ('error' in error.response.data) {\n                            if ('message' in error.response.data.error) {\n                                error_message = error.response.data.error.message;\n                            }\n                        } else {\n                            error_message = error.response.data;\n                        }\n                        console.error(\"Status code: \" + status_code + \". Error Msg: \" + error_message);\n                    } else {\n                        console.error(error);\n                    }\n                });\n            return (station_promise);\n        }\n    },\n    /*\n    GetNWSForecast\n    This retrieves the forecast for the given latitude and longitude. This nests requests as the first requests gives us the details\n    link for the forecast. If the latitude and longitude are provided, 2 queries are done. The first is to find the points\n    of data available for the area, then we get the forecast parameter from that and query the forecast. If the url\n    is provided, we just query the forecast.\n    Parameters:\n        -params is a keyed array with either of the following options:\n            -latitude Latitude for the request\n            -longitude Longitude for the request\n            or\n            -url is the url for the forecast.\n    Return:\n        Returns a promise, if it succeeds we return the forecast data.\n    * */\n\n    GetNWSForecast(params) {\n        console.log(\"GetNWSForecast started.\");\n        let url = undefined;\n        let url_param_provided = false;\n        if('latitude' in params && 'longitude' in params)\n        {\n            url = new URL(NWS_API_BASE_URL + '/points/' + params.latitude + ',' + params.longitude);\n        }\n        /*If we provide the url, we don't need to make the first query to get the url query for the grid points.*/\n        else if('url' in params)\n        {\n            url = new URL(params.url);\n            url_param_provided = true;\n        }\n        console.debug(\"GetNWSForecast GET url: \" + url.href);\n        let forecast_promise = undefined;\n        if(!url_param_provided) {\n            //This first request will get the information available at the provided point. The forecast url is in the returned\n            //data. WE use this in a nested request to then get the forecast.\n            forecast_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n                .then(function (forecast_properties) {\n                    if ('data' in forecast_properties && 'properties' in forecast_properties.data) {\n                        let forecast_url = forecast_properties.data.properties.forecast;\n                        axios.get(forecast_url, {headers: {'Content-Type': 'application/json'}}).then(function (forecast_data) {\n                            if ('data' in forecast_data && 'properties' in forecast_data.data) {\n                                return (forecast_data.data);\n                            }\n                        })\n                        //return forecast_promise;\n                    }\n                })\n                .then(forecast => {\n                    if ('data' in forecast) {\n                        return forecast.data;\n                    }\n                })\n                .catch(error => {\n                    let error_message = '';\n                    let status_code = 404;\n                    if ('response' in error && error.response !== undefined) {\n                        status_code = error.response.status;\n                        if ('error' in error.response.data) {\n                            if ('message' in error.response.data.error) {\n                                error_message = error.response.data.error.message;\n                            }\n                        } else {\n                            error_message = error.response.data;\n                        }\n                        console.error(\"Status code: \" + status_code + \". Error Msg: \" + error_message);\n                    } else {\n                        console.error(error);\n                    }\n                });\n        }\n        else {\n            forecast_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}}).then(function (forecast_data) {\n                if ('data' in forecast_data && 'properties' in forecast_data.data) {\n                    return (forecast_data.data);\n                }\n            })\n        }\n        return forecast_promise;\n\n    },\n    /*\n            EPAGetUVIndex\n            Queries the EPA UV Index hourly forecast.\n    */\n    EPAGetUVIndex(params) {\n        console.log(\"EPAGetUVIndex started.\");\n\n        let url = undefined\n        let time_frame = 'hourly';\n        if('type' in params)\n        {\n            if(params['type'] == 'daily') {\n                time_frame = 'daily';\n            }\n        }\n        if('post_code' in params)\n        {\n            if(time_frame == \"hourly\")\n            {\n                url = new URL(EPA_API_BASE_URL + \"getEnvirofactsUVHOURLY/ZIP/\" + params.post_code + \"/json\");\n            }\n            else {\n                url = new URL(EPA_API_BASE_URL + \"getEnvirofactsUVHOURLY/ZIP/\" + params.post_code + \"/json\");\n            }\n            /*\n            url = new URL(EPA_API_BASE_URL + '/epa_uv_index');\n            url.searchParams.append('post_code', params.post_code);\n            url.searchParams.append('time_frame', time_frame);\n            */\n        }\n        else if('city' in params && 'state_code' in params)\n        {\n            /*\n            url = new URL(EPA_API_BASE_URL + '/epa_uv_index');\n            url.searchParams.append('city', params.city);\n            url.searchParams.append('state', params.state_code);\n            url.searchParams.append('time_frame', time_frame);\n            */\n            url = new URL(EPA_API_BASE_URL + 'getEnvirofactsUVHOURLY/CITY/' + params.city + '/STATE/' + params.state_code + '/json');\n        }\n        console.debug(\"EPAGetUVIndex GET url: \" + url.href);\n\n        let uv_index_promise = axios.get(url.href)\n            .then(function(uv_index) {\n                if('data' in uv_index) {\n                    return (uv_index.data);\n                }\n                else {\n                    console.error(\"No data found in EPAGetUVIndex query.\");\n                    return [];\n                }\n            });\n        return uv_index_promise;\n\n\n    },\n\n    /*\n    NOAAFindTideStation\n    Given a latitude and longitude and search radius, this will return the stations nearest that point.\n     */\n    NOAAFindTideStation: function(latitude, longitude, radius)\n    {\n        console.debug(\"NOAAFindTideStation started.\")\n        let url = new URL(NOAA_STATION_QUERY_BASE_URL);\n        url.searchParams.append('lat', latitude);\n        url.searchParams.append('lon', longitude);\n        if(radius != undefined)\n        {\n            url.searchParams.append('radius', radius);\n        }\n        else\n        {\n            url.searchParams.append('radius', '2');\n        }\n        console.debug(\"NOAAFindTideStation url: \" + url.href);\n        let find_station_promise = axios.get(url.href, {headers: {'Content-Type': 'application/json'}})\n            .then(function(station_list){\n                if('data' in station_list) {\n                    return(station_list.data);\n                }\n                else {\n                    console.error(\"NOAAFindTideStation did not return data.\")\n                }\n            })\n        return(find_station_promise);\n    },\n    NOAATideQuery: function(date, station, product, datum, time_zone, interval, units) {\n        //'?date=today&\n        // station=8661070&\n        // product=predictions&\n        // datum=STND&\n        // time_zone=lst_ldt&\n        // interval=hilo&\n        // units=english&\n        // format=json'\n\n        console.debug(\"NOAATideQuery started.\")\n        let url = new URL(NOAA_TIDES_BASE_URL);\n        url.searchParams.append('date', date);\n        url.searchParams.append('station', station);\n        url.searchParams.append('product', product);\n        url.searchParams.append('datum', datum);\n        url.searchParams.append('time_zone', time_zone);\n        url.searchParams.append('interval', interval);\n        url.searchParams.append('units', units);\n        url.searchParams.append('format', 'json');\n\n        console.debug(\"NOAATideQuery url: \" + url.href);\n        let tide_promise = axios.get(url.href, {header: {'Content-Type': 'application/json'}})\n            .then(function(tide_data) {\n                return(tide_data.data);\n            })\n        return(tide_promise);\n    }\n}\n"]}]}