{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/shellfish_page.vue?vue&type=style&index=0&id=6c933a14&scoped=true&lang=css&","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/shellfish_page.vue","mtime":1682360357858},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/css-loader/dist/cjs.js","mtime":1682361371291},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1682361372711},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/postcss-loader/src/index.js","mtime":1682361371633},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1682361372188}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFkdmlzb3J5X2ljb24gewogIGhlaWdodDogMjVweDsKICB3aWR0aDogMjVweDsKfQoKLnBhZ2UtYmFja2dyb3VuZCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsKICAvKmJhY2tncm91bmQtY29sb3I6ICMwMDNEN0VEODsqLwp9Ci5kYXRhLWdyYXBoIHsKICBjb2xvcjogIzAwM0Q3RUQ4Cn0KCg=="},{"version":3,"sources":["shellfish_page.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+VA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"shellfish_page.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"montserat-font container page-background data-graph\">\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"font-avenir fs-5\">\n          <div>Shellfish Site: {{ site_description }}</div>\n          <div>Site ID: {{ site_id }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3\">\n        <div v-if=\"site_feature.length\" style=\"height: 250px; width: 250px\">\n          <vl-map id=\"single_site_map\"\n                  ref=\"single_site_map\"\n                  :load-tiles-while-animating=\"true\"\n                  :load-tiles-while-interacting=\"true\"\n                  data-projection=\"EPSG:4326\">\n            <vl-view :zoom.sync=\"zoom\" :center.sync=\"center\" :rotation.sync=\"rotation\"></vl-view>\n            <vl-layer-tile>\n              <vl-source-xyz url=\"https://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}\"\n                             attributions=\"\"/>\n            </vl-layer-tile>\n            <vl-layer-vector id=\"site\">\n              <vl-source-vector ref=\"site_vector_layer\" :features.sync=\"site_feature\"></vl-source-vector>\n              <vl-style-func :factory=\"siteStyleFactory\"></vl-style-func>\n            </vl-layer-vector>\n          </vl-map>\n\n        </div>\n      </div>\n      <div class=\"col-sm-4 ml-4 fs-6\">\n        <p>\n          {{ collection_program_description }}\n        </p>\n        <div>\n          Site: <span :class=\"text_color(advisory)\">{{advisory}}</span>\n        </div>\n        <div>\n          Last Data Check: {{lastCheckedDate}}\n        </div>\n        <div class=\"row\">\n        </div>\n      </div>\n    </div>\n    <div class=\"row gy-0\">\n      <div class=\"col-12\">\n        <hr>\n      </div>\n    </div>\n    <div class=\"row gy-0\">\n      <div class=\"col-sm-12\">\n        <hr>\n        <div class=\"fs-6\">Alerts</div>\n\n        <div v-if=\"site_feature.length\">\n          <NWSAlerts :latitude=\"site_latitude\"\n                     :longitude=\"site_longitude\"\n                      :post_code=\"site_post_code\">\n\n          </NWSAlerts>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n//import FeatureUtils from \"../utilities/feature_funcs\";\n\nimport DataAPI from \"../utilities/rest_api\";\n\nimport NWSAlerts from \"@/components/nws_alerts\";\nimport NoneMarkerIcon from \"@/assets/images/none_marker_25x25.png\";\nimport FeatureUtils from \"@/utilities/feature_funcs\";\nimport ShellfishLowMarkerIcon from \"@/assets/images/shellfish_low_marker_25x25.png\";\nimport ShellfishHiMarkerIcon from \"@/assets/images/shellfish_high_marker_25x25.png\";\nimport ShellfishNoneMarkerIcon from \"@/assets/images/shellfish_none_marker_25x25.png\";\nimport Style from 'ol/style/Style';\nimport Icon from 'ol/style/Icon';\nimport moment from \"moment\";\n\n\n\nexport default {\n  name: 'ShellfishPage',\n  props: {\n    'p_feature': {type: Object, default: undefined},\n    'p_site_name': {type: String, default: undefined},\n    'p_site_id': {type: String, default: undefined},\n    'p_program_type': {type: String, default: undefined},\n  },\n  components: {\n    NWSAlerts\n  },\n  data() {\n    return {\n      collection_program_info: undefined,\n      program_type: \"Shellfish Monitoring\",\n      zoom: 15,\n      center: [0, 0],\n      rotation: 0,\n      /*These can be passed as props, or the user could bookmark this page and go directly to it, in which case we\n      query the data.*/\n      internal_feature: undefined,\n      internal_site_name: undefined,\n      internal_site_id: undefined\n    }\n  },\n  mounted() {\n    let vm = this;\n    console.debug(\"ShellfishPage mounted.\");\n    if(this.p_program_type !== undefined) {\n      this.program_type = this.p_program_type;\n    }\n    DataAPI.GetWaterQualityProgramInfo(this.$store.state.site_name, this.program_type)\n        .then(program_info_rec => {\n          vm.collection_program_info = program_info_rec;\n        })\n\n    if (this.p_site_name === undefined) {\n      this.internal_site_name = this.$store.state.site_name;\n      this.internal_site_id = this.$store.state.station_name;\n      DataAPI.GetSitesPromise(this.internal_site_name, this.internal_site_id).then(features => {\n        console.debug(\"Retrieved: \" + features.data.sites.features.length + \" features\");\n        for (const ndx in features.data.sites.features) {\n          let site = features.data.sites.features[ndx];\n          if (vm.internal_site_id == site.properties.site_name) {\n            vm.internal_feature = site;\n            vm.center = vm.internal_feature.geometry.coordinates;\n            break;\n          }\n        }\n      });\n\n    }\n    else {\n      this.internal_feature = this.p_feature;\n    }\n  },\n  methods: {\n    siteStyleFactory: function() {\n      console.debug(\"siteStyleFactory started\");\n      /*\n      For each feature, this function is used to determine what icon to use based on the level.\n      */\n      var siteStyleFunction = function(feature, resolution) {\n        resolution;\n        let icon_scale = 0.75;\n        let properties = feature.getProperties();\n        let site_type = properties.site_type;\n        let icon = new Icon({\n          src: NoneMarkerIcon,\n          scale: icon_scale\n        });\n        if(site_type == 'Shellfish')\n        {\n          try\n          {\n            if (site_type in properties) {\n              //First check to see if our data is still fresh.\n              let dataFresh = FeatureUtils.isDataFresh(properties[site_type].advisory);\n              if (dataFresh) {\n                //Shellfish values are either true for closed or false for open.\n                let value = properties[site_type].advisory.value;\n                if (!value) {\n                  icon = new Icon({\n                    src: ShellfishLowMarkerIcon,\n                    scale: icon_scale\n                  });\n                } else {\n                  icon = new Icon({\n                    src: ShellfishHiMarkerIcon,\n                    scale: icon_scale\n                  });\n                }\n              } else {\n                icon = new Icon({\n                  src: ShellfishNoneMarkerIcon,\n                  scale: icon_scale\n                });\n              }\n            }\n          }\n          catch(error)\n          {\n            icon = new Icon({\n              src: ShellfishNoneMarkerIcon,\n              scale: icon_scale\n            });\n            console.error(error);\n          }\n        }\n        let icon_style = [\n          new Style({\n            image: icon,\n          })\n        ];\n        return(icon_style);\n      };\n      return siteStyleFunction;\n    },\n\n    onClose() {\n    },\n    text_color: function(level) {\n      let text_color = '';\n      if(level == \"OPEN\")\n      {\n        text_color = 'no_alert';\n      }\n      else\n      {\n        text_color = 'warning';\n      }\n      return text_color;\n    }\n  },\n  watch: {},\n  computed: {\n    site_post_code: function() {\n      if (this.p_feature !== undefined) {\n        return (this.p_feature.properties.post_code)\n      }\n      else if(this.internal_feature !== undefined) {\n        return (this.internal_feature.properties.post_code)\n      }\n      return ('');\n    },\n    site_name: function() {\n      let name = \"\";\n      if(this.p_site_name !== undefined)\n      {\n        name = this.p_site_name;\n      }\n      else if(this.internal_site_name !== undefined)\n      {\n        name = this.internal_site_name;\n      }\n      return(name);\n    },\n    site_id: function() {\n      let id = \"\";\n      if(this.p_site_id !== undefined)\n      {\n        id = this.p_site_id;\n      }\n      else if(this.internal_site_id !== undefined)\n      {\n        id = this.internal_site_id;\n      }\n      return(id);\n    },\n    site_longitude: function () {\n      if (this.internal_feature !== undefined) {\n        return (this.internal_feature.geometry.coordinates[0])\n      }\n      return (-1.0);\n    },\n    site_latitude: function () {\n      if (this.internal_feature !== undefined) {\n        return (this.internal_feature.geometry.coordinates[1])\n      }\n      return (-1.0);\n    },\n    site_feature: function () {\n      if (this.internal_feature !== undefined) {\n        return ([this.internal_feature]);\n      }\n      return ([]);\n    },\n    site_description: function () {\n      if (this.internal_feature !== undefined) {\n        return (this.internal_feature.properties.description);\n      }\n      return (\"\");\n    },\n    collection_program_name: function () {\n      let name = '';\n      if (this.collection_program_info !== undefined) {\n        name = this.collection_program_info.program_name;\n      }\n      return(name);\n    },\n    collection_program_description: function() {\n      let desc = '';\n      if (this.collection_program_info !== undefined) {\n        desc = this.collection_program_info.description;\n      }\n      return(desc);\n    },\n    collection_program_url: function() {\n      let url = '';\n      if (this.collection_program_info !== undefined) {\n        url = this.collection_program_info.url;\n      }\n      return(url);\n    },\n    region_name: function() {\n      console.debug(\"regionName started.\");\n      if(this.internal_feature !== undefined) {\n        let site_type = this.internal_feature.properties.site_type;\n        if (site_type in this.internal_feature.properties) {\n          return (this.internal_feature.properties[site_type].region)\n        }\n      }\n      return(\"\")\n    },\n    advisory: function() {\n      console.debug(\"hasAdvisory started.\");\n      if (this.internal_feature !== undefined) {\n\n        let site_type = this.internal_feature.properties.site_type;\n        if (site_type in this.internal_feature.properties) {\n          if ('advisory' in this.internal_feature.properties[site_type]) {\n            if (!this.internal_feature.properties[site_type].advisory.value) {\n              return (\"OPEN\");\n            } else {\n              return (\"CLOSED\");\n            }\n          }\n        }\n      }\n      return(\"Data unavailable\");\n    },\n    lastCheckedDate: function() {\n      console.debug(\"lastCheckedDate started.\");\n      if (this.internal_feature !== undefined) {\n\n        let site_type = this.internal_feature.properties.site_type;\n        if (site_type in this.internal_feature.properties) {\n          var date = moment(this.internal_feature.properties[site_type].advisory.date).format(\"MMMM Do YYYY hh:mm a\");\n          return (date);\n        }\n      }\n      return(\"\");\n    },\n    isDataFresh: function() {\n      if (this.internal_feature !== undefined) {\n        let properties = this.internal_feature.properties;\n        let site_type = this.internal_feature.properties.site_type;\n        return (FeatureUtils.isDataFresh(properties[site_type].advisory));\n      }\n      return(false);\n    }\n\n\n  }\n}\n</script>\n<style scoped>\n.advisory_icon {\n  height: 25px;\n  width: 25px;\n}\n\n.page-background {\n  background-color: #FFFFFF;\n  /*background-color: #003D7ED8;*/\n}\n.data-graph {\n  color: #003D7ED8\n}\n\n</style>\n"]}]}