{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/scatter_plot.vue?vue&type=style&index=0&id=51beb65c&scoped=true&lang=css&","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/scatter_plot.vue","mtime":1682360357864},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/css-loader/dist/cjs.js","mtime":1682361371291},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1682361372711},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/postcss-loader/src/index.js","mtime":1682361371633},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1682361372188}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNoYXJ0RWxlbSB7Cn0K"},{"version":3,"sources":["scatter_plot.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA","file":"scatter_plot.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div\n         :id=\"id\"\n         :height=\"style_chart_height\"\n         :width=\"style_chart_width\"\n    >\n    </div>\n</template>\n\n<script>\n\n    import Highcharts from 'highcharts';\n    //import moment from 'moment/src/moment';\n    import moment from 'moment';\n\n    export default {\n        name: 'WQPlot',\n        props: {\n            'chart_options': Object,\n            'id': { type: String, default: 'chart_id'},\n            'station_data': Array,\n            'height': Number,\n            'width': Number\n        },\n        data () {\n            return {\n                chart: undefined\n            }\n        },\n        methods: {\n          update(options) {\n            console.debug(\"update called.\");\n            if(this.chart !== undefined) {\n              this.chart.update(options);\n            }\n          },\n          destroy() {\n            console.debug(\"destroy called.\");\n            this.chart.destroy();\n          }\n        },\n        mounted()\n        {\n            console.debug(\"scatter_plot mounted id: \" + this.id);\n            //v-bind:style=\"{height: height, width: width }\"\n            var vm=this;\n            vm;\n            //vm.chart = new Highcharts.chart(vm.id, vm.chart_options);\n            this.$nextTick(function() {\n                vm.chart = new Highcharts.chart(vm.id, vm.chart_options);\n                if(this.station_data.length)\n                {\n                    this.chart.series[0].setData(this.station_data);//({data: this.station_data, name: \"Bacteria Counts\"});\n                    this.chart.xAxis[0].setExtremes(moment.utc().subtract(365, \"days\").valueOf(), moment.utc().valueOf());\n                }\n                vm.chart.setSize(vm.width, vm.height);\n            });\n        },\n        computed: {\n            style_chart_height: function() {\n                let style = this.height + 'px';\n                console.debug(\"chart height: \" + style);\n                return(style);\n            },\n            style_chart_width: function() {\n                let style = this.width + 'px';\n                console.debug(\"chart width: \" + style);\n                return(style);\n            }\n        },\n        watch: {\n\n            height: function(newVal, oldVal)\n            {\n                console.debug(\"height updated: \" + newVal + \" to \" + oldVal);\n                this.height = newVal;\n                if(this.chart !== undefined) {\n                    //this.chart.reflow();\n                    this.chart.setSize(this.width, this.height);\n                }\n            },\n            width: function(newVal, oldVal)\n            {\n                console.debug(\"width updated: \" + newVal + \" to \" + oldVal);\n                this.width = newVal;\n                if(this.chart !== undefined) {\n                    //this.chart.reflow();\n                    this.chart.setSize(this.width, this.height);\n                }\n            },\n\n            station_data: function() {\n                if(this.chart === undefined) {\n                    this.chart = new Highcharts.chart(this.id, this.chart_options);\n                }\n                //this.chart.setSize(this.width, this.height);\n                this.chart.series[0].setData(this.station_data);\n                //this.chart.xAxis[0].setExtremes(moment.utc().subtract(365, \"days\").valueOf(), moment.utc().valueOf());\n\n            },\n            /*\n            title(newValue)\n            {\n                this.chartOptions.title.text = newValue;\n            },\n            points(newValue)\n            {\n                this.chartOptions.series[0].data = newValue;\n            },\n            chartType(newValue)\n            {\n                this.chartOptions.chart.type = newValue.toLowerCase();\n            },\n            seriesColor (newValue)\n            {\n                this.chartOptions.series[0].color = newValue.toLowerCase();\n            },\n            animationDuration (newValue)\n            {\n                this.updateArgs[2].duration = Number(newValue);\n            }*/\n        }\n    }\n</script>\n\n<style scoped>\n    .chartElem {\n    }\n</style>\n"]}]}