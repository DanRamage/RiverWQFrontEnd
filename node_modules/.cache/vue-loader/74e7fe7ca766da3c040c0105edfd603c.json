{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/nws_alerts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/nws_alerts.vue","mtime":1682360357866},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/babel-loader/lib/index.js","mtime":1682365544304},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1682365544513}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["nws_alerts.vue"],"names":[],"mappings":";AAwfile":"nws_alerts.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-sm-3 fs-5\">\n        Temperature: {{current_air_temperature}}\n      </div>\n      <div class=\"col-sm-3  fs-5\">\n        Wind: {{current_wind_speed_direction}}\n      </div>\n    </div>\n    <div v-if=\"tide_chart_data !== undefined\">\n      <div class=\"row\">\n        <div class=\"col fs-4\" >\n          Tides\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12\">\n          <TideChartBlock :tide_station=\"tide_station.stationName\"\n                          :tide_station_id=\"tide_station.stationId\"\n                          :tide_data=\"tide_chart_data.predictions\"></TideChartBlock>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-12 fs-4\">\n        Alerts\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-3 fs-5\">\n        <div>\n          <a @click=\"show_rip_current_modal=true\"> Rip Currents <i class=\"bi bi-info-circle info-icon\"></i></a>\n        </div>\n        <div class=\"ms-5\" :class=\"text_color(rip_current_nws_event)\">\n          {{rip_current_alert}}\n        </div>\n        <RipCurrentModal v-show=\"show_rip_current_modal\"\n                       @close-rip-current-modal=\"show_rip_current_modal = false\"\n                       :alert_message=\"rip_current_details\">\n        </RipCurrentModal>\n      </div>\n      <div class=\"col-sm-3 fs-5\">\n        <div v-if=\"uv_index_data !== undefined\">\n          <div>\n            <a @click=\"show_uv_index_modal=true\">UV Index <i class=\"bi bi-info-circle info-icon\"></i></a>\n          </div>\n          <div class=\"ms-5\" :class=\"current_uv_color_class\">\n            {{this.current_uv_index}}-{{current_uv_index_rating}}\n          </div>\n        </div>\n        <UVIndexModal current_uv_index=\"current_uv_index_rating\" v-show=\"show_uv_index_modal\" @close-uv-index-modal=\"show_uv_index_modal = false\"></UVIndexModal>\n      </div>\n    </div>\n    <div v-if=\"forecast_record !== undefined\" class=\"row mt-3\">\n      <div class=\"col-sm-3\">\n        <NWSForecastBlock forecast_block_id=\"forecast_0\" :forecast=\"forecast_period(0)\"></NWSForecastBlock>\n      </div>\n      <div class=\"col-sm-3\">\n        <NWSForecastBlock forecast_block_id=\"forecast_1\" :forecast=\"forecast_period(1)\"></NWSForecastBlock>\n      </div>\n      <div class=\"col-sm-3\">\n        <NWSForecastBlock forecast_block_id=\"forecast_2\" :forecast=\"forecast_period(2)\"></NWSForecastBlock>\n      </div>\n      <div class=\"col-sm-3\">\n        <NWSForecastBlock forecast_block_id=\"forecast_3\" :forecast=\"forecast_period(3)\"></NWSForecastBlock>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import RipCurrentModal from \"@/components/rip_current_modal\";\n  import NWSForecastBlock from \"@/components/nws_forecast_block\";\n  import TideChartBlock from \"@/components/tide_prediction\";\n  import UVIndexModal from \"@/components/uv_index_modal\";\n  import NWSApi from \"@/utilities/nws_rest_api\";\n  import DataAPI from \"@/utilities/rest_api\";\n  import nws_alert from \"@/utilities/nws_classes\";\n  import {compass_array} from \"@/utilities/direction_to_compass\";\n\n  import moment from \"moment\";\n\n  export default {\n    name: 'NWSAlertsPage',\n      props: {\n        'longitude': {type: Number, default: undefined},\n        'latitude': {type: Number, default: undefined},\n        'post_code': {type: String, default: undefined}\n      },\n    components: {\n      RipCurrentModal,\n      NWSForecastBlock,\n      TideChartBlock,\n      UVIndexModal\n    },\n    data() {\n      return {\n        rip_current_alert: \"Data Unavailable\",\n        rip_current_nws_event: '',\n        rip_current_details: \"No current alerts\",\n        nws_rip_current_event: \"\",\n        show_rip_current_modal: false,\n        rip_current_record: undefined,\n        nws_alerts: [],\n        forecast_record: undefined,\n        point_information: undefined,\n        closet_obs_station: undefined,\n        latest_obs_data: undefined,\n        show_uv_index_modal: false,\n        uv_index_data: undefined,\n        current_uv_index: undefined,\n        current_uv_index_rating: 'Data Unavailable',\n        current_uv_color_class: '',\n        tide_station: undefined,\n        tide_chart_data: undefined\n      }\n    },\n    created() {\n      this.rip_current_record = new nws_alert();\n    },\n    mounted() {\n      let vm = this;\n      console.debug(\"NWSAlertsPage mounted.\");\n      /*\n      We do the point query to get the links for the forecast and observation links for the grid.\n      */\n      NWSApi.GetNWSPointInformation(this.latitude, this.longitude).then(point_info => {\n        if(point_info != undefined)\n        {\n          vm.point_information = point_info\n          NWSApi.GetObservingStationsforGrid(vm.point_information.observationStations).then(station_list => {\n            vm.closet_obs_station = station_list.features[0];\n            NWSApi.GetNWSStationLatestObservations({station_code: vm.closet_obs_station.properties.stationIdentifier})\n                .then(obs_data => {\n                  vm.latest_obs_data = obs_data;\n                })\n            vm.forecast_record = undefined;\n            NWSApi.GetNWSForecast({url:vm.point_information.forecast}).then(forecast => {\n              if(forecast != undefined)\n              {\n                if('properties' in forecast)\n                {\n                  vm.forecast_record = forecast.properties;\n                }\n                else {\n                  if ('status' in forecast) {\n                    console.error(\"Status: \" + forecast.status + \" \" + forecast.detail);\n                  }\n                  else {\n                    console.error(\"Failed to retrieve the forecast, no data payload or error payload.\");\n\n                  }\n                }\n              }\n            }).catch(error=> {\n              vm.forecast_record = undefined;\n              let error_message = '';\n              let status_code = 404;\n              if ('response' in error && error.response !== undefined) {\n                status_code = error.response.status;\n                if ('error' in error.response.data) {\n                  if ('message' in error.response.data.error) {\n                    error_message = error.response.data.error.message;\n                  }\n                } else {\n                  error_message = error.response.data;\n                }\n                console.error(\"Status code: \" + status_code + \". Error Msg: \" + error_message);\n              } else {\n                console.error(error);\n              }\n            });\n\n            })\n        }\n        else {\n          console.error(\"GetNWSPointInformation returned undefined.\")\n        }\n      }).catch(error => {\n        let error_message = '';\n        let status_code = 404;\n        if('response' in error && error.response !== undefined) {\n          status_code = error.response.status;\n          if ('error' in error.response.data) {\n            if ('message' in error.response.data.error) {\n              error_message = error.response.data.error.message;\n            }\n          } else {\n            error_message = error.response.data;\n          }\n          console.error(\"Status code: \" + status_code +\". Error Msg: \" + error_message);\n        }\n        else{\n          console.error(error);\n        }\n      });\n\n      /*\n      NWSApi.GetNWSZones({longitude: this.longitude, latitude: this.latitude}).then((zone_data)=>{\n        zone_data;\n        vm;\n      });\n      */\n      //{longitude: this.longitude, latitude: this.latitude, event: 'Rip Current Statement'}\n      NWSApi.GetNWSActiveAlerts({longitude: this.longitude, latitude: this.latitude}).then(alerts => {\n        vm.rip_current_alert =\n        vm.surf_alert = 'No Alerts';\n        vm.rip_current_details =\n        vm.surf_alert_details = \"No current alerts\";\n\n        let rip_current_found = false;\n        for(var i = 0; i < alerts.length; i++) {\n          let feature = alerts[i];\n          let alert = new nws_alert();\n          alert.parse_api_response(feature);\n           vm.nws_alerts[feature.properties.event] = alert;\n           if(feature.properties.event == 'Rip Current Statement')\n           {\n             //vm.rip_current_record.parse_api_response(feature);\n             vm.rip_current_alert = 'Rip Currents Present'\n             vm.rip_current_record = feature;\n             vm.rip_current_nws_event = feature.properties.event;\n             vm.rip_current_details = feature.properties.description;\n             rip_current_found = true\n           }\n           else if(feature.properties.event.search(/surf/i))\n          {\n            vm.surf_alert = feature.properties.event;\n            vm.surf_alert_details = feature.properties.description;\n          }\n        }\n        if(!rip_current_found)\n        {\n          vm.rip_current_alert = \"No Alerts\"\n        }\n      })\n      .catch(error => {\n        vm.rip_current_alert =\n        vm.surf_alert = 'Data Unavailable';\n        vm.rip_current_details =\n        vm.surf_alert_details = '';\n        DataAPI.error_handler('GetNWSActiveAlerts', error);\n      });\n      NWSApi.EPAGetUVIndex({post_code: this.post_code}).then(uv_index => {\n        vm.uv_index_data = uv_index;\n        vm.find_uv_index();\n      }).catch(error => {\n        vm.uv_index_data = undefined;\n        DataAPI.error_handler('EPAGetUVIndex', error);\n      });\n      NWSApi.NOAAFindTideStation(this.latitude, this.longitude, 20).then(tide_stations => {\n        this.tide_station = undefined;\n        //We loop the results looking for the closest harmonic station.\n        for(var i = 0; i < tide_stations.stationList.length; i+=1)\n        {\n          //The R stations are harmonic stations which will have the predictions.\n          if(tide_stations.stationList[i].stationType == 'R')\n          {\n            vm.tide_station = tide_stations.stationList[i];\n            break\n          }\n        }\n        if(this.tide_station != undefined)\n        {\n          NWSApi.NOAATideQuery('today',\n              vm.tide_station.stationId,\n              'predictions',\n              'STND',\n              'lst_ldt',\n              'hilo',\n              'english').then(tide_chart_data => {\n                vm.tide_chart_data = tide_chart_data;\n          })\n        }\n      }).catch(error => {\n        vm.tide_station = '';\n        vm.tide_chart_data = undefined;\n        DataAPI.error_handler('NOAAFindTideStation', error);\n\n      })\n      console.debug(\"NWSAlertsPage mounted finished.\");\n    },\n    methods: {\n      text_color: function(alert_message) {\n        let text_color = 'no_alert';\n        if(alert_message.match(/warning/i))\n        {\n          text_color = 'warning';\n        }\n        else if(alert_message.match(/advisory/i))\n        {\n          text_color = 'advisory';\n        }\n        else if(alert_message.match(/watch/i))\n        {\n          text_color = 'watch';\n        }\n        else if(alert_message.match(/statement/i))\n        {\n          text_color = 'warning';\n        }\n        return text_color;\n      },\n      forecast_period: function(period_number) {\n        if(this.forecast_record != undefined)\n        {\n          if(period_number < this.forecast_record.periods.length)\n          {\n            return(this.forecast_record.periods[period_number]);\n          }\n          else {\n            console.error(\"Period number request: \" + period_number + \" outside range.\");\n          }\n        }\n        return(undefined);\n      },\n      find_uv_index: function() {\n        let uv_index = -1;\n        this.current_uv_index = -1;\n        this.current_uv_index_rating = 'Data Unavailable';\n        this.current_uv_color_class = '';\n        if(this.uv_index_data != undefined) {\n          let now = moment();\n          /*Set the default index and rating to 0. UV Index forecast starts at 7am, so if we're checking before then\n          we won't have a forecast.\n           */\n          this.current_uv_index = 0;\n          this.current_uv_index_rating = 'Low'\n          for(var i= 0; i < this.uv_index_data.length; i++)\n          {\n            let uv_forecast_time = moment(this.uv_index_data[i].DATE_TIME, 'MMM/D/YYYY H A');\n            if(now.hour() == uv_forecast_time.hour())\n            {\n              uv_index = this.uv_index_data[i].UV_VALUE;\n              this.current_uv_index = uv_index;\n              if(this.current_uv_index <= 2)\n              {\n                this.current_uv_index_rating = \"Low\";\n                this.current_uv_color_class = 'uv_index_low';\n              }\n              else if(this.current_uv_index > 2 && this.current_uv_index <= 5)\n              {\n                this.current_uv_index_rating = \"Moderate\";\n                this.current_uv_color_class = 'uv_index_moderate';\n              }\n              else if(this.current_uv_index > 5 && this.current_uv_index <= 7)\n              {\n                this.current_uv_index_rating = \"High\";\n                this.current_uv_color_class = 'uv_index_high';\n              }\n              else if(this.current_uv_index > 7 && this.current_uv_index <= 10)\n              {\n                this.current_uv_index_rating = \"Very High\";\n                this.current_uv_color_class = 'uv_index_very_high';\n              }\n              else if(this.current_uv_index > 10)\n              {\n                this.current_uv_index_rating = \"Extreme\";\n                this.current_uv_color_class = 'uv_index_extreme';\n              }\n\n              break;\n            }\n          }\n        }\n        return uv_index;\n      },\n    },\n    computed: {\n      current_wind_speed_direction: function() {\n        if(this.latest_obs_data != undefined)\n        {\n          try {\n            if(this.latest_obs_data.windSpeed.value !== null) {\n              let wind_spd_mph = this.latest_obs_data.windSpeed.value * 0.621371;\n              let index = this.latest_obs_data.windDirection.value % 360;\n              let dir_index = parseInt(index / 22.5);\n              let compass_val = compass_array[dir_index];\n              return (wind_spd_mph.toFixed() + \"Mph \" + compass_val);\n            }\n            return(\"N/A\");\n          }\n          catch (e) {\n            console.exception(e);\n          }\n        }\n        return('');\n\n      },\n      current_air_temperature: function() {\n        if(this.latest_obs_data != undefined)\n        {\n          try {\n            if(this.latest_obs_data.temperature.value !== null) {\n              let temp_f = (this.latest_obs_data.temperature.value * 9 / 5) + 32;\n              return (temp_f.toFixed() + \" F\");\n            }\n            return(\"N/A\");\n          }\n          catch (e) {\n            console.exception(e);\n          }\n        }\n        return('');\n      },\n    }\n  }\n</script>\n<style>\n</style>\n"]}]}