{"remainingRequest":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/camera_graph.vue?vue&type=style&index=1&id=4fa78dc4&scoped=true&lang=css&","dependencies":[{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/src/components/camera_graph.vue","mtime":1682360357868},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/css-loader/dist/cjs.js","mtime":1682361371291},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1682361372711},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/postcss-loader/src/index.js","mtime":1682361371633},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1682361370579},{"path":"/Users/danramage/Documents/workspace/WaterQuality/RiverWQFrontEnd/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1682361372188}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJsdWUtYmFja2dyb3VuZF9jb2xvciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDYxLCAxMjYsIC44NSk7Cn0KCi5mdWxsLWdyYXBoIHsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwp9Ci5vYmplY3QtY291bnRzIHsKICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgNjEsIDEyNiwgLjg1KTsKICAgIGNvbG9yOiAjRkZGRkZGCn0KCg=="},{"version":3,"sources":["camera_graph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqWA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"camera_graph.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container-fluid\">\n        <div class=\"card\">\n            <div class=\"card-body object-counts\">\n                <button type=\"button\" class=\"app-button-style btn btn-primary avenir-font\" @click=\"$router.go(-1)\">&laquo; Back</button>\n                <div class=\"mt-4 card-title font-avenir\">\n                    <h4>Site: {{site_name}}</h4>\n                </div>\n                <div class=\"card-subtitle avenir-font-light\">\n                   <h5>ID: {{site_id}}</h5>\n                </div>\n                <div class=\"card-text\">\n                    These graphs are produced using Machine Learning to classify objects from the video stream. We provide\n                    an average of those counts per hour.\n                    <span v-if=\"this.object_count_type == 'person'\">\n                        <br>\n                        For People counts, due to data volumes, we are limited to 30 days of data retrieval.\n                    </span>\n                </div>\n                <div class=\"row mt-4\">\n                    <div class=\"col-3\">\n                        <h5 class=\"d-inline-block\">Object Count</h5>\n                        <b-dropdown id=\"object_type_dropdown\" :text=\"object_count_display_string\" class=\"object_type_dropdown m-md-2\">\n                            <b-dropdown-item @click=\"objectTypeSelected($event, 'person', 'People')\">People</b-dropdown-item>\n                            <b-dropdown-item @click=\"objectTypeSelected($event, 'chair', 'Chairs')\">Chairs</b-dropdown-item>\n                            <b-dropdown-item @click=\"objectTypeSelected($event, 'umbrella', 'Umbrellas')\">Umbrellas</b-dropdown-item>\n                            <b-dropdown-item @click=\"objectTypeSelected($event, 'bird', 'Birds')\">Birds</b-dropdown-item>\n                            <b-dropdown-item @click=\"objectTypeSelected($event, 'dog', 'Dogs')\">Dogs</b-dropdown-item>\n                        </b-dropdown>\n                    </div>\n                    <div class=\"col-6\">\n                        <div class=\"row\">\n                            <div class=\"col-3\">\n                                <label for=\"start_date\"><h5>Start Date</h5></label>\n                            </div>\n                            <div class=\"col-9\">\n                                <b-form-datepicker id=\"start_date\"\n                                                   :initial-date=\"start_date\"\n                                                   v-model=\"start_date\"\n                                                   class=\"mb-2\"></b-form-datepicker>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-3\">\n                                <label for=\"end_date\"><h5>End Date</h5></label>\n                            </div>\n                            <div class=\"col-9\">\n                                <b-form-datepicker id=\"end_date\"\n                                                   :initial-date=\"end_date\"\n                                                   v-model=\"end_date\"\n                                                   class=\"mb-2\"></b-form-datepicker>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-3\">\n                        <button type=\"button\"\n                                class=\"app-button-style btn btn-outline-primary mb-1\"\n                            @click=\"graphCounts()\">\n                            Graph Counts\n                        </button>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div :id=\"graph_id\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import Vue from 'vue'\n\n    import moment from 'moment';\n    import DataAPI from \"../utilities/rest_api\";\n\n    import Highcharts from 'highcharts';\n    import EventUtils from \"../utilities/analytics_funcs\";\n    import {DropdownPlugin, FormDatepickerPlugin} from 'bootstrap-vue';\n    Vue.use(DropdownPlugin);\n    Vue.use(FormDatepickerPlugin);\n\n    import {min,max,mean,median} from \"simple-statistics\";\n    Vue.use(min, max, mean, median);\n\n    export default {\n        name: 'CameraGraph',\n        props: {\n            'site_id': {type: String, default: 'Site Id'},\n            'camera_name': {type: String, default: ''}\n        },\n        components: {\n        },\n        data()\n        {\n            return {\n                start_date: moment().subtract(7, 'days').format(\"YYYY-MM-DD\"),\n                end_date: moment().format(\"YYYY-MM-DD\"),\n                graph_id: \"camera_graph\",\n                site_description: '',\n                object_count_display_string: 'People',\n                object_count_type: 'person',\n                graph_data: [],\n                chart_ref: undefined,\n                chart: undefined,\n                chart_options: {\n                    chart: {\n                        type: 'column',\n                    },\n                    credits: {\n                        enabled: false\n                    },\n                    title: {\n                        text: \"Average People Detected Per Hour\"\n                    },\n                    colors: ['#333333'],\n                    time: {\n                        timezone: 'America/New_York',\n                        useUTC: false\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        showLastLabel: false,\n                        title: {\n                            text: 'Date',\n                            offset: 30\n                        },\n                        type: 'datetime',\n                        dateTimeLabelFormats : {\n                            day: '%a %e %b \\'%y',\n                            hour: \"%I:%M %p\"\n                        },\n                        /*\n                        dateTimeLabelFormats: {\n                            week: '%e %b \\'%y',\n                            month: '%e %b \\'%y',\n                            year: '%e %b \\'%y',\n                        },\n                        labels: {\n                            rotation: 0,\n                            y: 20\n                        },\n                        */\n                        tickInterval: 3600 * 1000\n                    },\n                    yAxis: {\n                        showFirstLabel: false,\n                        title: {\n                            text: 'People count',\n                            margin: 20\n                        }\n                    },\n                    tooltip: {\n                        formatter: function () {\n                            let date_time = moment(this.x);\n                            return '<strong>Date:</strong> ' + date_time.format('DD MMM YYYY hh:mm a') + '<br /><strong>Count:</strong> ' + Math.round(this.y);\n                        }\n                    },\n                    legend: {\n                        enabled: false\n                    },\n                    series: [{\n                        name: 'Station',\n                        data: []\n                    }]\n\n                }\n            }\n        },\n        mounted() {\n            let vm = this;\n            console.debug(\"CameraGraph mounted.\");\n\n            //We aren't passing the props in the vue route path, so we check the params to then set the properties.\n            if('params' in this.$route) {\n                if('site_id' in this.$route.params)\n                {\n                    this.site_id = this.$route.params.site_id;\n                }\n                if('site_name' in this.$route.params)\n                {\n                    this.site_name = this.$route.params.site_name;\n                }\n                if('camera_name' in this.$route.params)\n                {\n                    this.camera_name = this.$route.params.camera_name;\n                }\n            }\n            let start_date = moment().subtract(7, 'days');\n            let end_date = moment();\n            this.getCameraData(this.camera_name, 'person', start_date, end_date);\n\n            this.$nextTick(function() {\n                vm.chart = new Highcharts.chart(vm.graph_id, vm.chart_options);\n            });\n\n        },\n        methods: {\n            objectTypeSelected(event, object_type, type_display_string) {\n                this.object_count_display_string = type_display_string;\n                this.object_count_type = object_type;\n            },\n            graphCounts() {\n                this.graph_data = [];\n                this.chart.series[0].setData(this.graph_data);\n                this.chart.yAxis[0].setTitle({ text: this.object_count_display_string + ' count'});\n                this.chart.setTitle({ text: \"Average \" + this.object_count_display_string + \" Detected Per Hour\"});\n                this.getCameraData(this.camera_name, this.object_count_type, this.start_date, this.end_date);\n\n                let label = this.camera_name + \" \" + this.object_count_type + \" \" + this.start_date + \" \" + this.end_date;\n\n                EventUtils.log_event(this.$gtag, 'graph', 'Camera Site', label, 0);\n            },\n            getCameraData(camera, object_type, start_date, end_date) {\n                console.debug(\"Querying camera: :\" + camera + \". Start: \" + start_date +\" End: \" + end_date);\n                let vm=this;\n                vm;\n                //For the moment, we need to limit data pull to only 30 days. Otherwise the server can potentially run\n                //out of memory.\n                if(object_type === 'person')\n                {\n                    let start = moment(start_date);\n                    let end = moment(end_date);\n                    let days_delta = end.diff(start, 'days');\n                    if(days_delta > 30)\n                    {\n                        end_date = start.add(30, 'days');\n                        //this.end_date = end_date;\n                        end_date = end_date.format(\"YYYY-MM-DD\");\n                    }\n                }\n                DataAPI.GetCameraData(camera,\n                    object_type,\n                    start_date,\n                    end_date)\n                    .then(response => {\n                        let data = response.data;\n                        //This groups the data by time stamp counts.\n                        //We collate counts for each record that has the same time stamp.\n                        let dSum = [];\n                        let objCount = 0;\n                        let dTimePrev = undefined;\n                        for (var i = 0; i < data.length; i++) {\n                            let curTime = moment(data[i].m_date);\n                            if (i == 0) {\n                                dTimePrev = curTime;\n                            }\n                            if (curTime.diff(dTimePrev) == 0) {\n                                objCount++;\n                            }\n                            else {\n                                dSum.push({ m_date: dTimePrev, object_count: objCount });\n                                objCount = 0;\n                                dTimePrev = curTime;\n                            }\n\n                        }\n\n                        let hour_counts = {};\n                        //BUild an hourly summary\n                        dSum.forEach(function(rec)\n                        {\n                            let cur_key = rec.m_date.format('YYYY-MM-DD');\n                            if(!(cur_key in hour_counts)) {\n                                hour_counts[cur_key] = [];\n                                let i = 0;\n                                while(i < 24) {\n                                    //hour_counts[cur_key].push({count: 0, rec_count: 0});\n                                    //We build arrays for each hour to hold the counts per frame.\n                                    hour_counts[cur_key].push({counts: []});\n                                    i++;\n                                }\n                            }\n                            let count_rec = hour_counts[cur_key];\n                            let rec_hour = rec.m_date.get('hour');\n                            count_rec[rec_hour]['counts'].push(rec.object_count);\n\n                            //if(rec.object_count > 0) {\n                            //count_rec[rec_hour]['count'] += rec.object_count;\n                            //count_rec[rec_hour]['rec_count'] += 1;\n                            //}\n\n                        });\n\n                        //Now we order the data for the graph. Probably can do this is the step above, but\n                        //for now one more step.\n                        for(let date_key in hour_counts)\n                        {\n                            let day_counts = hour_counts[date_key];\n                            day_counts.forEach(function(obj_count, hour_index, counts_array)\n                           {\n                               counts_array;\n                               let hour_str =  hour_index;\n                               if(hour_index < 10)\n                               {\n                                   hour_str = '0' + hour_index;\n                               }\n                               let time_stamp_str = date_key  + ' ' + hour_str + ':00:00';\n                               let time_stamp_obj = moment(time_stamp_str);\n                               //let avg_hour_count = 0;\n\n                               //if(obj_count['rec_count'] > 0) {\n                               //    avg_hour_count = obj_count['count'] / obj_count['rec_count'];\n                               //}\n                               let median_count = 0;\n                               let avg_count = 0;\n                               let max_count = 0;\n                               if(obj_count.counts.length) {\n                                   let sorted = obj_count.counts.sort();\n                                   median_count = median(sorted);\n                                   avg_count = mean(sorted);\n                                   max_count = max(sorted)\n                               }\n                               median_count;\n                               max_count;\n                               //console.debug(\"Camera Stats. Avg: \" + avg_count + \" Median: \" + median_count + \" Max: \" + max_count);\n                               vm.graph_data.push([time_stamp_obj.valueOf(), avg_count]);\n                           })\n                        }\n                        vm.chart.series[0].setData(vm.graph_data);\n\n                    })\n                    .catch(error => console.error(error));\n\n\n            },\n            onClose() {\n                console.debug(\"onClose modal_graph_closed event emitted.\");\n                this.$emit(\"modal_graph_closed\");\n            }\n        }\n    }\n</script>\n<style>\n    .button_color {\n        background-color: rgba(0, 61, 126, .85);\n        border-color: #FFFFFF;\n        opacity: 0.75;\n    }\n    .object_type_dropdown > button {\n        background-color: rgba(0, 61, 126, .85);\n        border-color: #FFFFFF;\n        opacity: 0.75;\n    }\n\n    .object_type_dropdown > .btn-secondary:hover,\n    .object_type_dropdown > .btn-secondary:focus,\n    .object_type_dropdown > .btn-secondary:active {\n        color: rgba(0, 61, 126, .85);\n        background-color: #FFFFFF;\n        opacity: 0.75;\n    }\n</style>\n<style scoped>\n    .blue-background_color {\n        background-color: rgba(0, 61, 126, .85);\n    }\n\n    .full-graph {\n        width: 100%;\n        height: 100%;\n    }\n    .object-counts {\n        background-color: rgba(0, 61, 126, .85);\n        color: #FFFFFF\n    }\n\n</style>\n"]}]}